{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  onClose(selectedDates) {\n    userDate = selectedDates[0]; \n    if (userDate <= new Date()) {\n      alert(\"Please choose a date in the future\");\n      startBtn.disabled = true;\n    } else {\n      startBtn.disabled = false;\n    }\n  },\n}; \n\nconst dataPicker = document.querySelector(`#datetime-picker`);\nconst startBtn = document.querySelector(`button[data-start]`);\nconst day = document.querySelector(`span[data-days]`);\nconst hour = document.querySelector(`span[data-hours]`);\nconst minute = document.querySelector(`span[data-minutes]`);\nconst second = document.querySelector(`span[data-seconds]`);\n\n\nflatpickr(dataPicker, options);\n\nlet intervalId = null;\nlet userDate = null;\n\n\nstartBtn.addEventListener(`click`, () => {\n\n    intervalId = setInterval(() => {\n      const currentTime = new Date();\n      const diffMs = userDate - currentTime;\n\n\n        if (diffMs < 1000) {\n          clearInterval(intervalId);\n          return;\n      }\n      startBtn.disabled = true;\n      const time = convertMs(diffMs);\n      updateTimerDisplay(time);\n\n    }, 1000);\n\n});\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction updateTimerDisplay({ days, hours, minutes, seconds }) {\n      day.textContent = String(days).padStart(2, '0');\n      hour.textContent = String(hours).padStart(2, '0');\n      minute.textContent = String(minutes).padStart(2, '0');\n      second.textContent = String(seconds).padStart(2, '0');\n    }"],"names":["options","selectedDates","userDate","startBtn","dataPicker","day","hour","minute","second","flatpickr","intervalId","diffMs","time","convertMs","updateTimerDisplay","ms","days","hours","minutes","seconds"],"mappings":"wIAGA,MAAMA,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,QAAQC,EAAe,CACrBC,EAAWD,EAAc,CAAC,EACtBC,GAAY,IAAI,MAClB,MAAM,oCAAoC,EAC1CC,EAAS,SAAW,IAEpBA,EAAS,SAAW,EAEvB,CACH,EAEMC,EAAa,SAAS,cAAc,kBAAkB,EACtDD,EAAW,SAAS,cAAc,oBAAoB,EACtDE,EAAM,SAAS,cAAc,iBAAiB,EAC9CC,EAAO,SAAS,cAAc,kBAAkB,EAChDC,EAAS,SAAS,cAAc,oBAAoB,EACpDC,EAAS,SAAS,cAAc,oBAAoB,EAG1DC,EAAUL,EAAYJ,CAAO,EAE7B,IAAIU,EAAa,KACbR,EAAW,KAGfC,EAAS,iBAAiB,QAAS,IAAM,CAErCO,EAAa,YAAY,IAAM,CAE7B,MAAMC,EAAST,EADK,IAAI,KAItB,GAAIS,EAAS,IAAM,CACjB,cAAcD,CAAU,EACxB,MACV,CACMP,EAAS,SAAW,GACpB,MAAMS,EAAOC,EAAUF,CAAM,EAC7BG,EAAmBF,CAAI,CAExB,EAAE,GAAI,CAEX,CAAC,EAED,SAASC,EAAUE,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAS,CAC1C,CAEA,SAASL,EAAmB,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACzDd,EAAI,YAAc,OAAOW,CAAI,EAAE,SAAS,EAAG,GAAG,EAC9CV,EAAK,YAAc,OAAOW,CAAK,EAAE,SAAS,EAAG,GAAG,EAChDV,EAAO,YAAc,OAAOW,CAAO,EAAE,SAAS,EAAG,GAAG,EACpDV,EAAO,YAAc,OAAOW,CAAO,EAAE,SAAS,EAAG,GAAG,CAC1D"}